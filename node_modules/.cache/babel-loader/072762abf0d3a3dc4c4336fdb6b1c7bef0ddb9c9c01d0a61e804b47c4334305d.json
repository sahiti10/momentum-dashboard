{"ast":null,"code":"// This service simulates a real-time API connection.\n// In a real application, this would be replaced with a WebSocket or a polling mechanism.\n\nconst initialData = {\n  totalUsers: 14278,\n  sessions: 3504,\n  conversionRate: 12.53,\n  campaignPerformance: {\n    labels: ['9:00AM', '10:00AM', '11:00AM', '12:00PM', '1:00PM', '2:00PM', '3:00PM'],\n    datasets: [{\n      label: 'User Signups',\n      data: [65, 59, 80, 81, 56, 55, 60],\n      fill: true,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.4,\n      backgroundColor: 'rgba(75, 192, 192, 0.2)'\n    }]\n  },\n  recentSignups: [{\n    id: 1,\n    name: 'John Doe',\n    location: 'New York, USA',\n    time: '2 mins ago'\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    location: 'London, UK',\n    time: '3 mins ago'\n  }, {\n    id: 3,\n    name: 'Sam Green',\n    location: 'Tokyo, JP',\n    time: '5 mins ago'\n  }, {\n    id: 4,\n    name: 'Emily White',\n    location: 'Sydney, AU',\n    time: '8 mins ago'\n  }]\n};\n\n// Function to generate random data updates\nexport const fetchData = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Simulate KPI changes\n      initialData.totalUsers += Math.floor(Math.random() * 5);\n      initialData.sessions += Math.floor(Math.random() * 10);\n\n      // Simulate chart data update\n      const newChartData = [...initialData.campaignPerformance.datasets[0].data];\n      newChartData.shift(); // Remove the oldest data point\n      newChartData.push(Math.floor(Math.random() * (90 - 50 + 1)) + 50); // Add a new one\n      initialData.campaignPerformance.datasets[0].data = newChartData;\n      const newLabels = [...initialData.campaignPerformance.labels];\n      newLabels.shift();\n      const lastTime = newLabels[newLabels.length - 1];\n      const newHour = parseInt(lastTime) % 12 + 1;\n      newLabels.push(`${newHour}:00${newHour > 8 ? 'PM' : 'AM'}`);\n      initialData.campaignPerformance.labels = newLabels;\n      resolve({\n        ...initialData\n      });\n    }, 500); // Simulate network latency\n  });\n};","map":{"version":3,"names":["initialData","totalUsers","sessions","conversionRate","campaignPerformance","labels","datasets","label","data","fill","borderColor","tension","backgroundColor","recentSignups","id","name","location","time","fetchData","Promise","resolve","setTimeout","Math","floor","random","newChartData","shift","push","newLabels","lastTime","length","newHour","parseInt"],"sources":["/Users/sahitiadepu/Desktop/momentum-dashboard/src/services/mockApi.js"],"sourcesContent":["// This service simulates a real-time API connection.\n// In a real application, this would be replaced with a WebSocket or a polling mechanism.\n\nconst initialData = {\n  totalUsers: 14278,\n  sessions: 3504,\n  conversionRate: 12.53,\n  campaignPerformance: {\n    labels: ['9:00AM', '10:00AM', '11:00AM', '12:00PM', '1:00PM', '2:00PM', '3:00PM'],\n    datasets: [{\n      label: 'User Signups',\n      data: [65, 59, 80, 81, 56, 55, 60],\n      fill: true,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.4,\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n    }]\n  },\n  recentSignups: [\n    { id: 1, name: 'John Doe', location: 'New York, USA', time: '2 mins ago' },\n    { id: 2, name: 'Jane Smith', location: 'London, UK', time: '3 mins ago' },\n    { id: 3, name: 'Sam Green', location: 'Tokyo, JP', time: '5 mins ago' },\n    { id: 4, name: 'Emily White', location: 'Sydney, AU', time: '8 mins ago' },\n  ]\n};\n\n// Function to generate random data updates\nexport const fetchData = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Simulate KPI changes\n      initialData.totalUsers += Math.floor(Math.random() * 5);\n      initialData.sessions += Math.floor(Math.random() * 10);\n\n      // Simulate chart data update\n      const newChartData = [...initialData.campaignPerformance.datasets[0].data];\n      newChartData.shift(); // Remove the oldest data point\n      newChartData.push(Math.floor(Math.random() * (90 - 50 + 1)) + 50); // Add a new one\n      initialData.campaignPerformance.datasets[0].data = newChartData;\n      \n      const newLabels = [...initialData.campaignPerformance.labels];\n      newLabels.shift();\n      const lastTime = newLabels[newLabels.length-1];\n      const newHour = (parseInt(lastTime) % 12) + 1;\n      newLabels.push(`${newHour}:00${newHour > 8 ? 'PM' : 'AM'}`);\n      initialData.campaignPerformance.labels = newLabels;\n\n\n      resolve({ ...initialData });\n    }, 500); // Simulate network latency\n  });\n};"],"mappings":"AAAA;AACA;;AAEA,MAAMA,WAAW,GAAG;EAClBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,IAAI;EACdC,cAAc,EAAE,KAAK;EACrBC,mBAAmB,EAAE;IACnBC,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACjFC,QAAQ,EAAE,CAAC;MACTC,KAAK,EAAE,cAAc;MACrBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAClCC,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE,GAAG;MACZC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,aAAa,EAAE,CACb;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,UAAU;IAAEC,QAAQ,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAa,CAAC,EAC1E;IAAEH,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,YAAY;IAAEC,QAAQ,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAa,CAAC,EACzE;IAAEH,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,WAAW;IAAEC,QAAQ,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAa,CAAC,EACvE;IAAEH,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,aAAa;IAAEC,QAAQ,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAa,CAAC;AAE9E,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC5BC,UAAU,CAAC,MAAM;MACf;MACArB,WAAW,CAACC,UAAU,IAAIqB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;MACvDxB,WAAW,CAACE,QAAQ,IAAIoB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;;MAEtD;MACA,MAAMC,YAAY,GAAG,CAAC,GAAGzB,WAAW,CAACI,mBAAmB,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC;MAC1EiB,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;MACtBD,YAAY,CAACE,IAAI,CAACL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;MACnExB,WAAW,CAACI,mBAAmB,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,GAAGiB,YAAY;MAE/D,MAAMG,SAAS,GAAG,CAAC,GAAG5B,WAAW,CAACI,mBAAmB,CAACC,MAAM,CAAC;MAC7DuB,SAAS,CAACF,KAAK,CAAC,CAAC;MACjB,MAAMG,QAAQ,GAAGD,SAAS,CAACA,SAAS,CAACE,MAAM,GAAC,CAAC,CAAC;MAC9C,MAAMC,OAAO,GAAIC,QAAQ,CAACH,QAAQ,CAAC,GAAG,EAAE,GAAI,CAAC;MAC7CD,SAAS,CAACD,IAAI,CAAC,GAAGI,OAAO,MAAMA,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;MAC3D/B,WAAW,CAACI,mBAAmB,CAACC,MAAM,GAAGuB,SAAS;MAGlDR,OAAO,CAAC;QAAE,GAAGpB;MAAY,CAAC,CAAC;IAC7B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}